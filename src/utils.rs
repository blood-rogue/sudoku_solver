use std::fmt::Display;

use crate::{
    bitset::{DigitSet, IndexSet},
    sudoku::{Cell, Index, Puzzle},
};

pub const RANGES: [IndexSet; 27] = [
    IndexSet::new(511),
    IndexSet::new(261_632),
    IndexSet::new(133_955_584),
    IndexSet::new(68_585_259_008),
    IndexSet::new(35_115_652_612_096),
    IndexSet::new(17_979_214_137_393_152),
    IndexSet::new(9_205_357_638_345_293_824),
    IndexSet::new(4_713_143_110_832_790_437_888),
    IndexSet::new(2_413_129_272_746_388_704_198_656),
    IndexSet::new(4_731_607_904_558_235_517_441),
    IndexSet::new(9_463_215_809_116_471_034_882),
    IndexSet::new(18_926_431_618_232_942_069_764),
    IndexSet::new(37_852_863_236_465_884_139_528),
    IndexSet::new(75_705_726_472_931_768_279_056),
    IndexSet::new(151_411_452_945_863_536_558_112),
    IndexSet::new(302_822_905_891_727_073_116_224),
    IndexSet::new(605_645_811_783_454_146_232_448),
    IndexSet::new(1_211_291_623_566_908_292_464_896),
    IndexSet::new(1_838_599),
    IndexSet::new(14_708_792),
    IndexSet::new(117_670_336),
    IndexSet::new(246_772_580_483_072),
    IndexSet::new(1_974_180_643_864_576),
    IndexSet::new(15_793_445_150_916_608),
    IndexSet::new(33_121_255_085_135_066_300_416),
    IndexSet::new(264_970_040_681_080_530_403_328),
    IndexSet::new(2_119_760_325_448_644_243_226_624),
];

pub const ROWS: [u128; 9] = [
    511,
    261_632,
    133_955_584,
    68_585_259_008,
    35_115_652_612_096,
    17_979_214_137_393_152,
    9_205_357_638_345_293_824,
    4_713_143_110_832_790_437_888,
    2_413_129_272_746_388_704_198_656,
];

pub const COLS: [u128; 9] = [
    4_731_607_904_558_235_517_441,
    9_463_215_809_116_471_034_882,
    18_926_431_618_232_942_069_764,
    37_852_863_236_465_884_139_528,
    75_705_726_472_931_768_279_056,
    151_411_452_945_863_536_558_112,
    302_822_905_891_727_073_116_224,
    605_645_811_783_454_146_232_448,
    1_211_291_623_566_908_292_464_896,
];

pub const BOXES: [u128; 9] = [
    1_838_599,
    14_708_792,
    117_670_336,
    246_772_580_483_072,
    1_974_180_643_864_576,
    15_793_445_150_916_608,
    33_121_255_085_135_066_300_416,
    264_970_040_681_080_530_403_328,
    2_119_760_325_448_644_243_226_624,
];

const BOX_MAPPING: [usize; 81] = [
    0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4,
    4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 6,
    6, 6, 7, 7, 7, 8, 8, 8, 6, 6, 6, 7, 7, 7, 8, 8, 8,
];

pub const fn ranges_of(idx: Index) -> IndexSet {
    IndexSet::new(ROWS[idx / 9] | COLS[idx % 9] | BOXES[BOX_MAPPING[idx]])
}

pub const FULL_SET: u16 = 0b0000_0011_1111_1110;
pub const UNSOLVED_CELL: Cell = Cell::Unsolved(DigitSet::new(FULL_SET));

impl Display for Puzzle {
    fn fmt(&self, buf: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        writeln!(buf, "╭───┬───┬───┬───┬───┬───┬───┬───┬───╮")?;

        let mut puzzle = [[0; 9]; 9];
        for (i, cell) in self.cells.iter().enumerate() {
            puzzle[i / 9][i % 9] = match cell {
                Cell::Solved(v) => *v,
                Cell::Unsolved(_) => b' ',
            };
        }

        let [parts @ .., last] = puzzle;
        for row in parts {
            writeln!(
                buf,
                "│ {} │ {} │ {} │ {} │ {} │ {} │ {} │ {} │ {} │\n├───┼───┼───┼───┼───┼───┼───┼───┼───┤",
                row[0], row[1], row[2], row[3], row[4], row[5], row[6], row[7], row[8]
            )?;
        }

        write!(
            buf,
            "│ {} │ {} │ {} │ {} │ {} │ {} │ {} │ {} │ {} │\n╰───┴───┴───┴───┴───┴───┴───┴───┴───╯",
            last[0], last[1], last[2], last[3], last[4], last[5], last[6], last[7], last[8]
        )?;

        Ok(())
    }
}
