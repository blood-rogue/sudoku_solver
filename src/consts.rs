use crate::sudoku::Idx;

#[rustfmt::skip]
mod skip_fmt {
    pub const ROWS: [[(usize, usize); 9]; 9] = [
        [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8)],
        [(1, 0), (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8)],
        [(2, 0), (2, 1), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8)],
        [(3, 0), (3, 1), (3, 2), (3, 3), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8)],
        [(4, 0), (4, 1), (4, 2), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (4, 8)],
        [(5, 0), (5, 1), (5, 2), (5, 3), (5, 4), (5, 5), (5, 6), (5, 7), (5, 8)],
        [(6, 0), (6, 1), (6, 2), (6, 3), (6, 4), (6, 5), (6, 6), (6, 7), (6, 8)],
        [(7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7), (7, 8)],
        [(8, 0), (8, 1), (8, 2), (8, 3), (8, 4), (8, 5), (8, 6), (8, 7), (8, 8)],
    ];

    pub const COLS: [[(usize, usize); 9]; 9] = [
        [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)],
        [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1)],
        [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2)],
        [(0, 3), (1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3)],
        [(0, 4), (1, 4), (2, 4), (3, 4), (4, 4), (5, 4), (6, 4), (7, 4), (8, 4)],
        [(0, 5), (1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5), (8, 5)],
        [(0, 6), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (6, 6), (7, 6), (8, 6)],
        [(0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)],
        [(0, 8), (1, 8), (2, 8), (3, 8), (4, 8), (5, 8), (6, 8), (7, 8), (8, 8)],
    ];

    pub const BOXES: [[(usize, usize); 9]; 9] = [
        [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)],
        [(0, 3), (0, 4), (0, 5), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5)],
        [(0, 6), (0, 7), (0, 8), (1, 6), (1, 7), (1, 8), (2, 6), (2, 7), (2, 8)],
        [(3, 0), (3, 1), (3, 2), (4, 0), (4, 1), (4, 2), (5, 0), (5, 1), (5, 2)],
        [(3, 3), (3, 4), (3, 5), (4, 3), (4, 4), (4, 5), (5, 3), (5, 4), (5, 5)],
        [(3, 6), (3, 7), (3, 8), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8)],
        [(6, 0), (6, 1), (6, 2), (7, 0), (7, 1), (7, 2), (8, 0), (8, 1), (8, 2)],
        [(6, 3), (6, 4), (6, 5), (7, 3), (7, 4), (7, 5), (8, 3), (8, 4), (8, 5)],
        [(6, 6), (6, 7), (6, 8), (7, 6), (7, 7), (7, 8), (8, 6), (8, 7), (8, 8)],
    ];
}

pub use skip_fmt::{BOXES, COLS, ROWS};

const BOX_MAPPING: [((usize, usize), usize); 81] = [
    ((0, 0), 0),
    ((0, 1), 0),
    ((0, 2), 0),
    ((1, 0), 0),
    ((1, 1), 0),
    ((1, 2), 0),
    ((2, 0), 0),
    ((2, 1), 0),
    ((2, 2), 0),
    ((0, 3), 1),
    ((0, 4), 1),
    ((0, 5), 1),
    ((1, 3), 1),
    ((1, 4), 1),
    ((1, 5), 1),
    ((2, 3), 1),
    ((2, 4), 1),
    ((2, 5), 1),
    ((0, 6), 2),
    ((0, 7), 2),
    ((0, 8), 2),
    ((1, 6), 2),
    ((1, 7), 2),
    ((1, 8), 2),
    ((2, 6), 2),
    ((2, 7), 2),
    ((2, 8), 2),
    ((3, 0), 3),
    ((3, 1), 3),
    ((3, 2), 3),
    ((4, 0), 3),
    ((4, 1), 3),
    ((4, 2), 3),
    ((5, 0), 3),
    ((5, 1), 3),
    ((5, 2), 3),
    ((3, 3), 4),
    ((3, 4), 4),
    ((3, 5), 4),
    ((4, 3), 4),
    ((4, 4), 4),
    ((4, 5), 4),
    ((5, 3), 4),
    ((5, 4), 4),
    ((5, 5), 4),
    ((3, 6), 5),
    ((3, 7), 5),
    ((3, 8), 5),
    ((4, 6), 5),
    ((4, 7), 5),
    ((4, 8), 5),
    ((5, 6), 5),
    ((5, 7), 5),
    ((5, 8), 5),
    ((6, 0), 6),
    ((6, 1), 6),
    ((6, 2), 6),
    ((7, 0), 6),
    ((7, 1), 6),
    ((7, 2), 6),
    ((8, 0), 6),
    ((8, 1), 6),
    ((8, 2), 6),
    ((6, 3), 7),
    ((6, 4), 7),
    ((6, 5), 7),
    ((7, 3), 7),
    ((7, 4), 7),
    ((7, 5), 7),
    ((8, 3), 7),
    ((8, 4), 7),
    ((8, 5), 7),
    ((6, 6), 8),
    ((6, 7), 8),
    ((6, 8), 8),
    ((7, 6), 8),
    ((7, 7), 8),
    ((7, 8), 8),
    ((8, 6), 8),
    ((8, 7), 8),
    ((8, 8), 8),
];

pub const fn row_of((i, _): Idx) -> [(usize, usize); 9] {
    ROWS[i]
}
pub const fn col_of((_, j): Idx) -> [(usize, usize); 9] {
    COLS[j]
}
pub fn box_of(idx: Idx) -> [(usize, usize); 9] {
    BOXES[BOX_MAPPING.into_iter().find(|&(v, _)| v == idx).unwrap().1]
}
